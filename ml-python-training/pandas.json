{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import datetime as d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame({\n",
    "        'first_name': ['Aleksandra', 'Tomek', 'Konrad', 'Katarzyna', 'Jan', 'Tomek'],\n",
    "        'last_name': ['Nowak', 'Kowalski', 'Lewandowski', 'Woźniak', 'Wiśniewska', 'Błaszczykowski'],\n",
    "        'gender': ['female', 'male', 'male', 'female', 'male', 'male'],\n",
    "        'date_of_birth': [d(1988, 1, 10), d(1938, 10, 22), d(1986, 11, 20), \n",
    "                          d(1980, 2, 12), d(1978, 5, 21), d(1960, 3, 1)],\n",
    "        'rate': [100, 90, 50, 110, 170, 40],\n",
    "        'hours': [60, 20, 100, 50, 160, 70],\n",
    "    },\n",
    "    columns=('first_name', 'last_name', 'gender', 'date_of_birth', 'rate', 'hours'),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>gender</th>\n",
       "      <th>date_of_birth</th>\n",
       "      <th>rate</th>\n",
       "      <th>hours</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Konrad</td>\n",
       "      <td>Lewandowski</td>\n",
       "      <td>male</td>\n",
       "      <td>1986-11-20</td>\n",
       "      <td>50</td>\n",
       "      <td>100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Jan</td>\n",
       "      <td>Wiśniewska</td>\n",
       "      <td>male</td>\n",
       "      <td>1978-05-21</td>\n",
       "      <td>170</td>\n",
       "      <td>160</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  first_name    last_name gender date_of_birth  rate  hours\n",
       "2     Konrad  Lewandowski   male    1986-11-20    50    100\n",
       "4        Jan   Wiśniewska   male    1978-05-21   170    160"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[(df['gender'] == 'male') & (df.date_of_birth.dt.year > 1975)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([100,  90,  50, 110, 170,  40], dtype=int64)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rate.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rate</th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>female</td>\n",
       "      <td>210</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>male</td>\n",
       "      <td>350</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        rate  gender\n",
       "gender              \n",
       "female   210       2\n",
       "male     350       4"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rate_stats = df.groupby('gender').aggregate({'rate': sum, 'gender': 'count'})\n",
    "rate_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x194da0ba8c8>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rate_stats.plot('gender', 'rate')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rate_level(rate):\n",
    "    if rate < 60:\n",
    "        return ' < 60'\n",
    "    elif rate < 120:\n",
    "        return '60-120'\n",
    "    else:\n",
    "        return '> 120'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>gender</th>\n",
       "      <th>date_of_birth</th>\n",
       "      <th>rate</th>\n",
       "      <th>hours</th>\n",
       "      <th>rate_level</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Aleksandra</td>\n",
       "      <td>Nowak</td>\n",
       "      <td>female</td>\n",
       "      <td>1988-01-10</td>\n",
       "      <td>100</td>\n",
       "      <td>60</td>\n",
       "      <td>60-120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Tomek</td>\n",
       "      <td>Kowalski</td>\n",
       "      <td>male</td>\n",
       "      <td>1938-10-22</td>\n",
       "      <td>90</td>\n",
       "      <td>20</td>\n",
       "      <td>60-120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Konrad</td>\n",
       "      <td>Lewandowski</td>\n",
       "      <td>male</td>\n",
       "      <td>1986-11-20</td>\n",
       "      <td>50</td>\n",
       "      <td>100</td>\n",
       "      <td>&lt; 60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Katarzyna</td>\n",
       "      <td>Woźniak</td>\n",
       "      <td>female</td>\n",
       "      <td>1980-02-12</td>\n",
       "      <td>110</td>\n",
       "      <td>50</td>\n",
       "      <td>60-120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Jan</td>\n",
       "      <td>Wiśniewska</td>\n",
       "      <td>male</td>\n",
       "      <td>1978-05-21</td>\n",
       "      <td>170</td>\n",
       "      <td>160</td>\n",
       "      <td>&gt; 120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Tomek</td>\n",
       "      <td>Błaszczykowski</td>\n",
       "      <td>male</td>\n",
       "      <td>1960-03-01</td>\n",
       "      <td>40</td>\n",
       "      <td>70</td>\n",
       "      <td>&lt; 60</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   first_name       last_name  gender date_of_birth  rate  hours rate_level\n",
       "0  Aleksandra           Nowak  female    1988-01-10   100     60     60-120\n",
       "1       Tomek        Kowalski    male    1938-10-22    90     20     60-120\n",
       "2      Konrad     Lewandowski    male    1986-11-20    50    100       < 60\n",
       "3   Katarzyna         Woźniak  female    1980-02-12   110     50     60-120\n",
       "4         Jan      Wiśniewska    male    1978-05-21   170    160      > 120\n",
       "5       Tomek  Błaszczykowski    male    1960-03-01    40     70       < 60"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['rate_level'] = df.rate.apply(rate_level)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "60-120    3\n",
       " < 60     2\n",
       "> 120     1\n",
       "Name: rate_level, dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.rate_level.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
